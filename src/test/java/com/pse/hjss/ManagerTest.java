package com.pse.hjss;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
class ManagerTest {
    @BeforeEach
    public void  initializeLessonsAndLearners(){
        AddLearnersLessons.addLearners(); // adding pre-registered learners
        AddLearnersLessons.addCoaches(); // adding pre-registered coaches
        AddLearnersLessons.addLessons(); // adding default lessons
        Utils.initializeFoldersAndFiles(); // clearing the current month bookings data if any
    }
    @Test
    void registerLearner() {
        // Get the count of current learners in the data structure
        int countLearners = Manager.learnersHashMap.size();
        String firstName = "Alia";
        String lastName = "Doe";
        int age = 5;
        String gender = "female";
        int currentGradeLevel = 3;
        String emergencyContactNumber = "1234567890";
        Manager.registerLearner(firstName, lastName, age, gender, currentGradeLevel, emergencyContactNumber);
        //returns true if the learners data structure size is increased by 1 after registering a new learner.
        assertEquals(Manager.learnersHashMap.size(), countLearners+1); // Ensure learner is added to the hashmap
    }

    @Test
    void bookALesson() {
        int lessonID = 20100; // this is a valid Lesson ID with grade level 2
        int learnerID = 11001; //this is a valid Learner having grade level 2
        // Call the method
        boolean booked = Manager.bookALesson(lessonID, learnerID);
        // Check if the lesson is booked successfully
        assertTrue(booked);

        lessonID = 20101; // this is a valid Lesson ID with grade level 4
        //the below call of bookALesson should return false as the learner with grade level 2
        // can't book a lesson with grade level 4
        booked = Manager.bookALesson(lessonID, learnerID);
        // Check if the lesson is not booked as it should be
        assertFalse(booked);
    }


    @Test
    void cancelBooking() {
        int lessonID = 20100; // this is a valid Lesson ID with grade level 2
        int learnerID = 11001; //this is a valid Learner having grade level 2
        // Booking a valid lesson to cancel it in the future for testing
        Manager.bookALesson(lessonID, learnerID); // it will book a lesson with bookingID i.e. B300157
        // because 300157 is the default first bookingID generated by ID generator.
        final String GENERATED_BOOKING_ID =  "B300157";
        String result = Manager.cancelBooking(GENERATED_BOOKING_ID,""+learnerID);
        // Assert that the booking is cancelled
        assertEquals("cancelled", result);
    }

    @Test
    void changeBooking() {
        int lessonID = 20100; // this is a valid Lesson ID with grade level 2
        int learnerID = 11001; //this is a valid Learner having grade level 2
        // Booking a valid lesson to cancel it in the future for testing
        Manager.bookALesson(lessonID, learnerID); // it will book a lesson with bookingID i.e. B300157
        // because 300157 is the default first bookingID generated by ID generator.
        final String GENERATED_BOOKING_ID =  "B300157";
        //Now let us change the above booking for a different lesson
        lessonID = 20104; // this lesson has a grade level 3 and our learner 11001 with grade level 2 shall
        //be able to book it.
        String result =  Manager.changeBooking( GENERATED_BOOKING_ID, ""+learnerID,  lessonID);
        // Assert that the booking is changed if I get updated in the result
        assertEquals("updated", result);

        //Now if I try to change the above updated booking again to the same lesson, it should
        //send me the error message of already_booked
        result =  Manager.changeBooking( GENERATED_BOOKING_ID, ""+learnerID,  lessonID);
        assertEquals("already_booked", result);

        //Now if I cancel this above booking, then I should not be able to change this booking
        //and should get the error message already_cancelled
        Manager.cancelBooking(GENERATED_BOOKING_ID,""+learnerID);
    }

}